import { matchesState } from './utils';
import { mapState } from './mapState';
import { StateNode } from './StateNode';
import { State } from './State';
import { Machine } from './Machine';
import { raise, send, sendParent, log, start, stop, assign, after, done } from './actions';
import { interpret, Interpreter, spawn } from './interpreter';
import { matchState } from './match';
declare const actions: {
    raise: typeof raise;
    send: typeof send;
    sendParent: typeof sendParent;
    log: typeof log;
    cancel: (sendId: string | number) => import("./types").CancelAction;
    start: typeof start;
    stop: typeof stop;
    assign: <TContext, TEvent extends import("./types").EventObject = import("./types").EventObject>(assignment: import("./types").Assigner<TContext, TEvent> | Partial<{ [K in keyof TContext]: ((context: TContext, event: TEvent) => TContext[K]) | TContext[K]; }>) => import("./types").AssignAction<TContext, TEvent>;
    after: typeof after;
    done: typeof done;
};
export { Machine, StateNode, State, matchesState, mapState, actions, assign, send, sendParent, interpret, Interpreter, matchState, spawn };
export * from './types';
