{"remainingRequest":"/Users/jyothish/Documents/connect-plus-free-vue/template/demo_1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jyothish/Documents/connect-plus-free-vue/template/demo_1/src/pages/dashboard/index.vue?vue&type=template&id=49b38dbf&scoped=true&","dependencies":[{"path":"/Users/jyothish/Documents/connect-plus-free-vue/template/demo_1/src/pages/dashboard/index.vue","mtime":1606803653014},{"path":"/Users/jyothish/Documents/connect-plus-free-vue/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/connect-plus-free-vue/template/demo_1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/connect-plus-free-vue/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/connect-plus-free-vue/template/demo_1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}